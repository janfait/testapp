devtools::build(binary = TRUE)
devtools::build(binary = TRUE)
install.packages("P:/08_Inovace/R/opencpu/testapp_1.0.zip",repos=NULL)
install.packages("stringr")
install.packages("stringr")
devtools::build(binary = TRUE)
library(testapp)
library(testapp)
devtools::build(binary = TRUE)
library(testapp)
devtools::build(binary = TRUE)
library(testapp)
get_url("http//www.stemmark.cz")
url <- tryCatch(getURL(URLEncode(site)))
require(RCurl)
get_url("http//www.stemmark.cz")
#define the function
get_url <- function(site) {
url <- tryCatch(getURL(URLencode(site)))
fail <- function(x) inherits(x, "try-error")
if(!fail(url)) {
return(url)
} else {
return("Jejda.Chyba.Pokračujte na další stránku")
}
}
get_url("http//www.stemmark.cz")
get_url("http://www.stemmark.cz")
install.packages("testapp")
install.packages("P:/08_Inovace/R/opencpu/testapp.1.0.zip",repos=NULL)
install.packages("P:/08_Inovace/R/opencpu/testapp_1.0.zip",repos=NULL)
get_url("http://www.stemmark.cz")
library(testapp)
get_url("http://www.stemmark.cz")
library(testapp)
install.packages("P:/08_Inovace/R/opencpu/testapp_1.0.zip",repos=NULL)
library(testapp)
get_url("http://www.stemmark.cz")
require(testapp)
get_url("http://www.stemmark.cz")
require(RCurl)
get_url("http://www.stemmark.cz")
library(testapp)
get_url("http://www.stemmark.cz")
require(testapp)
get_url("http://www.stemmark.cz")
?install_github
library(devtools)
?install_github
###########
## SETUP
###########
#db libs
library(DBI)
library(RSQLite)
#general
library(plyr)
library(reshape2)
library(stringr)
library(RJSONIO)
library(stringi)
library(data.table)
#wd
setwd("Z:\atm")
###########
## DATA
###########
#create a DB driver and connection
drv <- dbDriver('SQLite')
con <- dbConnect(drv,db='sm_histories.db3')
#get table names from connection
table_names<-dbListTables(con)
data <-dbReadTable(con,name="data")
#look at the columns of selected table
cols <-names(data)
cols
#data table approach
dt <- data.table(data)
#transform using data table which allows to expand the splitted string to rows with ids
dt<-dt[ , list( hist_data_action= unlist( str_split(hist_data, "\n" ) ) ) , by = hist_id ]
#split the action data into separate columns
dt<- cbind(dt,colsplit(dt$hist_data_action,"\t",c("hist_action_time","hist_action","hist_url","hist_domain")))
#join with the original data.frame
d<-merge(y=dt,x=data[,c("hist_senderemail","hist_uploadtime","hist_id","smash")],by="hist_id")
###########
## ANALYSIS
###########
#remove previous object to free memory
rm(dt)
rm(data)
###########
## SETUP
###########
#db libs
library(DBI)
library(RSQLite)
#general
library(plyr)
library(reshape2)
library(stringr)
library(RJSONIO)
library(stringi)
library(data.table)
update.packages()
y
.libPaths("C:/Users/fait/Documents/R/win-library/3.1")
#db libs
library(DBI)
library(RSQLite)
#general
library(plyr)
library(reshape2)
library(stringr)
library(RJSONIO)
library(stringi)
library(data.table)
#wd
setwd("Z:\atm")
update.packages()
?update.packages()
update.packages(lib.loc = "C:/Users/fait/Documents/R/win-library/3.1")
library(plyr)
library(utils)
library(MASS)
library(rpart)
library(corrplot)
library(data.table)
update.packages()
update.packages()
library(data.table)
library(stringi)
library(RJSONIO)
library(DBI)
library(RSQLite)
#general
library(plyr)
library(reshape2)
installed.packages()
update.packages()
###########
## SETUP
###########
#db libs
library(DBI)
library(RSQLite)
#general
library(plyr)
library(reshape2)
library(stringr)
library(RJSONIO)
library(stringi)
library(data.table)
setwd("Z:/atm")
#create a DB driver and connection
drv <- dbDriver('SQLite')
con <- dbConnect(drv,db='sm_histories.db3')
#get table names from connection
table_names<-dbListTables(con)
data <-dbReadTable(con,name="data")
#look at the columns of selected table
cols <-names(data)
cols
#data table approach
dt <- data.table(data)
#transform using data table which allows to expand the splitted string to rows with ids
dt<-dt[ , list( hist_data_action= unlist( str_split(hist_data, "\n" ) ) ) , by = hist_id ]
#split the action data into separate columns
dt<- cbind(dt,colsplit(dt$hist_data_action,"\t",c("hist_action_time","hist_action","hist_url","hist_domain")))
#join with the original data.frame
d<-merge(y=dt,x=data[,c("hist_senderemail","hist_uploadtime","hist_id","smash")],by="hist_id")
rm(dt)
rm(data)
#define media websites by strings
mediasites <- c("fashion","ocko","spektrum","minimax","rebel","paprika","universal","disney","slagr","fishing","animax","geographic","spektrum","horor","hbo","nationalgeogra","atm","hulu","zkoukni","cekni","muybo","n-joy","serial","vimeo","ustream","tv","metacafe","nova","www.stream","youtube","dailymotion","ceskatelevize","voyo","iprima","play","vide","axn","itunes","grooveshark","netflix","uloz","torrent")
#define subdata
subd <- d
subd <- subset(subd,subd$hist_action=="browser_url")
#find if the domain is among the mediasites define above
subd$is_media <- sapply(1:length(subd$hist_domain),function(x) if(mean(str_detect(subd$hist_domain[x], mediasites))){1}else{0})
#number of unique users
user_count<-length(unique(d$hist_senderemail))
user_count
users <- unique(d$hist_senderemail)
write.csv(users,"user_atm.csv",row.names=F)
#number of unique domain visits
subd <- unique(subd[c("hist_senderemail","hist_domain","is_media")])
t_domains<-as.data.frame(table(subd$hist_domain,dnn=c("domain")),responseName="freq")
#share of media sites on all domains
media_share<- mean(subd$is_media)
media_share
#share of media sites for every user
user_media_share<-with(subd,aggregate(is_media,list(hist_senderemail),mean))
mean(user_media_share==0.00)
#domains share of users
subd <- subset(subd,subd$is_media==1)
domain_user_share <- as.data.frame(table(subd$hist_domain,dnn=c("domain")),responseName="freq")
domain_user_share$pct_share <- round(100*(domain_user_share$freq/user_count),1)
domain_user_share
write.csv2(domain_user_share,"media_domains.csv")
write.csv2(subd,"media_domains_users.csv")
library(devtools)
install_github("testapp","janfait")
library(testapp)
get_url("http://www.seznam.cz")
get_url("https://www.tipsport.cz/kurzy#print=0&drawCompetId=-1&drawSportId=-1&type=ODDS&superSportId=&competitionId=108862&formName=SportsForm")
?install_github()
?install_github()
?install_github
library(testapp)
get_url("http://digitalni-fotoaparaty.heureka.cz/")
sessionInfo(package = NULL)
print(x, locale = TRUE, ...)
print(x, locale = TRUE)
print(sessionInfo(), locale = TRUE)
library(testapp)
#define the function
readwrite <- function(dir,type=1) {
fail <- function(x) inherits(x, "try-error")
d<- data.frame(a=c(1,2,3),b=c(3,5,6))
if(type==1){
try(write.csv(d,dir),silent=T)
Sys.sleep(3)
if(fail(csv)){
a<-"fail csv"
}else{
a<-csv
}
}
if(type==2){
try(save(d,file=dir),silent=T)
Sys.sleep(3)
rda<-try(load(dir),silent=T)
if(fail(rda)){
a<-"fail rda"
}else{
a<-rda
}
}
return(a)
}
?read.csv
library(testapp)
